{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","tareasStr","localStorage","getItem","JSON","parse","jump","count","obtenerLocalStorage","j","c","useState","setJump","setCount","useEffect","data","setItem","stringify","className","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gMAoCeA,MAxBf,WAAgB,IAAD,EATa,WAC1B,IAAMC,EAAYC,aAAaC,QAAQ,SACvC,OAAOC,KAAKC,MAAMJ,IAAc,CAACK,KAAM,EAAGC,MAAO,GAQrBC,GAAfC,EADA,EACNH,KAAgBI,EADV,EACGH,MADH,EAEWI,mBAASF,GAFpB,mBAENH,EAFM,KAEAM,EAFA,OAGaD,mBAASD,GAHtB,mBAGNH,EAHM,KAGCM,EAHD,KASb,OAJAC,qBAAU,WATmB,IAACC,IAUL,CAACT,OAAMC,SAThCL,aAAac,QAAQ,QAASZ,KAAKa,UAAUF,MAU1C,CAACT,EAAMC,IAGR,qBAAKW,UAAU,YAAf,SACE,sBAAKA,UAAU,OAAf,UACE,6BAAKX,IAAW,uBAChB,wBAAQY,QAAS,WAAKN,EAASN,EAAQD,IAAQY,UAAU,UAAzD,kBACA,wBAAQC,QAAS,WAAKN,EAASN,EAAQD,IAAQY,UAAU,UAAzD,kBAAgF,uBAChF,wBAAQC,QAAS,WAAKP,EAAQN,EAAO,IAAKY,UAAU,YAApD,eACA,+BAAOZ,IACP,wBAAQa,QAAS,WAAKP,EAAQN,EAAO,IAAKY,UAAU,YAApD,qBCjBOE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.47d7a69c.chunk.js","sourcesContent":["import { useEffect, useState } from 'react';\nimport './App.css';\n\nconst obtenerLocalStorage = () => {\n  const tareasStr = localStorage.getItem('count');\n  return JSON.parse(tareasStr) || {jump: 1, count: 0}\n}\n\nconst actualizarLocalStorage = (data) => {\n  localStorage.setItem('count', JSON.stringify(data))\n}\n\nfunction App() {\n  const {jump: j, count: c} = obtenerLocalStorage();\n  const [jump, setJump] = useState(j);\n  const [count, setCount] = useState(c);\n\n  useEffect(()=>{\n    actualizarLocalStorage({jump, count})\n  }, [jump, count])\n\n  return (\n    <div className=\"container\">\n      <div className=\"card\">\n        <h1>{count}</h1><br/>\n        <button onClick={()=>{setCount(count - jump)}} className=\"primary\">Less</button>\n        <button onClick={()=>{setCount(count + jump)}} className=\"primary\">More</button><br/>\n        <button onClick={()=>{setJump(jump - 1)}} className=\"secondary\">-</button>\n        <span>{jump}</span>\n        <button onClick={()=>{setJump(jump + 1)}} className=\"secondary\">+</button>\n\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}